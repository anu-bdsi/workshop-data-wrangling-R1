---
title: "Welcome to Tidyverse"
subtitle: "[[ANU BDSI<br>workshop]{.tag-label} Data Wrangling with R [Part 1]{.part-label}]{.tag-workshop}"
format:
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: true
    css: assets/custom.css
    footer: anu-bdsi.github.io/workshop-data-wrangling-R1/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2024/04/08
date-format: "D[th] MMMM YYYY"
filters:
  - webr
execute: 
  echo: true
webr: 
  show-startup-message: false  
  packages: 
    - tidyverse
---



## {{< fa crosshairs >}} Current learning objectives

```{r}
#| include: false
source("setup.R")
```

```{r}
#| results: asis 
#| echo: false
learning_objectives(2:3)
```

## Base R

::: flex

::: {.w-40}

![](images/base-R.png)

:::

::: {.w-60 .pl3}

- R has **7 packages**, collectively referred to as the "base R", that are **loaded automatically** when you launch it. 
- The functions in the base packages are generally well-tested and trustworthy.

:::

:::


## Tidyverse

* **Tidyverse** refers to a collection of R-packages that share a common (opinionated) design philosophy, grammar and data structure.


<center>
<img height="130px" src="images/tidyverse.png"> <img height="100px" src="images/ggplot2.png"><img height="100px" src="images/dplyr.png"><img height="100px" src="images/tidyr.png"><img height="100px" src="images/readr.png"><img height="100px" src="images/tibble.png"><img height="100px" src="images/purrr.png"><img height="100px" src="images/stringr.png"><img height="100px" src="images/forcats.png"><img height="100px" src="images/lubridate.png">
</center>

* This trains your mental model to do data science tasks in a manner which may make it easier, faster, and/or fun for you to do these tasks.
* `library(tidyverse)` is a shorthand for loading the 9 core tidyverse packages.

```{r}
#| warning: true
library(tidyverse)
```






# Data wrangling with Base R {background-color="#F5EDDE"}

## `data.frame` [(Base R)]{.f2}

::: incremental

* In R, `data.frame` is a special class of `list`. 
* Every column in the `data.frame` is a vector of the same length.
* Each entry in a vector have the same type, e.g. logical, integer, double (or numeric), character or factor.
* It has an attribute `row.names` which could be a sequence of integers indexing the row number or some unique identifier.

:::

. . . 

```{webr-r}
mtcars
```


## Subsetting by column [(Base R)]{.f2}

* Remember, `data.frame` is just a special type of `list` and inherit methods applied for `list`.

```{webr-r}
mtcars[c("mpg", "cyl")]  # by column names
mtcars[1:2]  # by column names
```

* `data.frame` also can be accessed by array index:

```{webr-r}
mtcars[, c("mpg", "cyl")]  # by column names
mtcars[, 1:2] # by index
```

## Subsetting by column [(Base R)]{.f2} {{< fa exclamation-circle >}}



- If you subset _a single column_ using `[, ]`, then by default the output is a vector and not a `data.frame`.

```{webr-r}
mtcars[, "mpg"]
mtcars[, "mpg", drop = FALSE] #  to preserve the output as a `data.frame`
```

## Subsetting by row [(Base R)]{.f2}

```{webr-r}
mtcars[3:1, ] # using index
mtcars[c("Datsun 710", "Mazda RX4"), ] # using row names (if it has row names)
mtcars[mtcars$mpg > 31, ] # using a logical vector
subset(mtacars, mpg > 31) # using "non-standard evaluation"
```

## Adding or modifying a column [(Base R)]{.f2}

```{webr-r}
df1 <- cbind(mtcars, gpm = 1 / mtcars$mpg)
df1$gpm <- 1 / df1$mpg
df1[["gpm"]] <- 1 / df1$mpg
df1$wt[df1$cyl==6] <- 10 # modify only a part of it
```

## Adding a row [(Base R)]{.f2}

```{webr-r}
df2 <- rbind(cars, data.frame(dist = 10, speed = 3))
tail(df2, 3)

df2 <- rbind(cars, c(10, 3))
tail(df2, 3)
```

What do you notice with the order of the new entry?

## Sorting columns [(Base R)]{.f2}

```{webr-r}
mtcars[, sort(names(mtcars))]
```


## Sorting rows [(Base R)]{.f2}


```{webr-r}
order(mtcars$mpg)
mtcars[order(mtcars$mpg),]
```

## Calculating statistical summaries by group [(Base R)]{.f2}

ðŸŽ¯ Calculate the _average_ weight (`wt`) of a car for each gear type in (`gear`)  `mtcars`

```{webr-r}
tapply(mtcars$wt, mtcars$gear, mean)
```

. . . 

ðŸŽ¯ Calculate the _median_ weight (`wt`) of a car for each gear (`gear`) and engine (`vs`) type in  `mtcars`

```{webr-r}
tapply(mtcars$wt, list(mtcars$gear, mtcars$vs), median)
```



# Data wrangling with Tidyverse {background-color="#F5EDDE"}

## A grammar of data manipulation

::: flex

::: {.w-70 .incremental .pr3}

* `dplyr` is a core package in `tidyverse` 
* The earlier concept of `dplyr` (first on CRAN in 2014-01-29) was implemented in `plyr` (first on CRAN in 2008-10-08).
* The functions in `dplyr` has been evolving frequently but `dplyr` v1.0.0 was released on CRAN in 2020-05-29 suggesting that functions in `dplyr` are maturing and thus the user interface is unlikely to change.


:::

::: {.w-30 .pl3}

<center>

![](images/dplyr.png)

</center>

:::

:::




::: aside

Hadley Wickham, Romain FranÃ§ois, Lionel Henry and Kirill MÃ¼ller
  (2020). dplyr: A Grammar of Data Manipulation. R package version
  1.0.2. 
  
Hadley Wickham (2011). The Split-Apply-Combine Strategy for Data
  Analysis. Journal of Statistical Software, 40(1), 1-29.
  
:::

## `dplyr` "verbs"

- The main functions of `dplyr` include:
  - `arrange`
  - `select`
  - `mutate`
  - `rename`
  - `group_by`
  - `summarise`
- Notice that these functions are _verbs_.


## `dplyr` structure 

- Functions in `dplyr` generally have the form:

<center>
`verb(data, args)`
</center>

- The first argument `data` is a `data.frame` object.

. . . 

- What do you think the following will do?

```{webr-r}
rename(mtcars, miles_per_gallon = mpg)
arrange(mtcars, wt)
```


## Base R and Tidyverse


::: incremental

* Tidyverse is not a substitute for Base R 
* Knowing Base R is essential to use Tidyverse effectively


:::


::: notes


* Data wrangling in Tidyverse just gives you a different flavour of how you can do things in Base R. 
* All data wrangling can be achieved using Base R, so why load extra package(s) to deal with the data wrangling? ðŸ¤”
* Tidyverse packages share a common design philosophy, grammar and data structure
* This trains your mental model to do data science tasks in a certain manner which may make it easier, faster, and/or fun for you to do these tasks
* It's an opinionated approach so you should make a decision for yourself of what works for you _and_ others that you share your work with

:::


## Summary


# Exercise time {background-color="#F5EDDE"}


[<i class='fas fa-laptop-code'></i>](https://anu-bdsi.github.io/workshop-data-wrangling-R1/materials.html#tabset-1-1-tab){.f-headline}

`r exercise_countdown(2)`